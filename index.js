const express = require('express');
require("./utils.js");
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000; // if PORT is not defined in .env, use port 3000

// for encrypting the password
const bcrypt = require('bcrypt');
const saltRounds = 12;

// for session storage in mongoDB ( sessions for logged in verified users )
const session = require('express-session');
const MongoStore = require('connect-mongo');
const expireTime = 1000 * 60 * 60 * 1; // expires after 1 hour in milliseconds ( 1000ms * 60s * 60m *1d = 1 hour)

// to store users in mongoDB
const Joi = require("joi");
const e = require('express');

// secret information section
const mongodb_host = process.env.MONGODB_HOST;
const mongodb_database = process.env.MONGODB_DATABASE; // check on MongoDB Atlas https://cloud.mongodb.com/ > Deployment > Database > Cluster0 > Collections
const mongodb_user = process.env.MONGODB_USER;
const mongodb_password = process.env.MONGODB_PASSWORD;
const mongodb_session_secret = process.env.MONGODB_SESSION_SECRET; // generated by https://guidgenerator.com/ 
const node_session_secret = process.env.NODE_SESSION_SECRET; // generated by https://guidgenerator.com/
// end secret section
 

var { database } = include('databaseConnection');

const userCollection = database.db(mongodb_database).collection('users');
 
app.set("view engine", "ejs");

const navLinks = [
  { name: "Home", link: "/" },
  { name: "Cats", link: "/" },
  { name: "Login", link: "/login" },
  { name: "Admin", link: "/admin" },
  { name: "404", link: "*" }
];

// this is also a middleware. if there's a POST request, it will parse the body of the POST request and give it to the request.body
app.use(express.urlencoded({ extended: false })); // to parse the body of the POST request

var mongoStore = MongoStore.create({
  mongoUrl: `mongodb+srv://${mongodb_user}:${mongodb_password}@${mongodb_host}/${mongodb_database}`, // connection string to MongoDB Atlas
  crypto: {
    secret: mongodb_session_secret
  }
});

// this is a middleware. when there's a request, see if there's a cookie, if there;s a cookie, make sure it's a valid cookie, if it's a valid cookie parse the content of the cookie and give request.session with all those variables in it.
app.use(session({
  secret: node_session_secret,
  store: mongoStore, //default is memory store
  saveUninitialized: false,
  resave: true
}));


function isValidSession(req) {
  if (req.session.authenticated) {
      return true;
  }
  return false;
}

function sessionValidation(req,res,next) {
  if (isValidSession(req)) {
      next();
  }
  else {
      res.redirect('/login');
  }
}

function isAdmin(req) {
  if (req.session.user_type == 'admin') {
      return true;
  }
  return false;
}

function adminAuthorization(req, res, next) {
  if (!isAdmin(req)) {
      res.status(403);
      res.render("errorMessage", {error: "Not Authorized"});
      return;
  }
  else {
      next();
  }
}

app.get('/', (req, res) => {
  if (!req.session.authenticated) {
    res.render("homepage");
  }
  
  var username = req.session.username;

  res.render("loggedinHomepage", { username: username});
});


app.use(express.static(__dirname + "/public")); // so that we can host the images from the media folder


app.get('/signup', (req, res) => {
  res.render("signup");
});

// submitUser after joi
app.post('/signupSubmit', async (req, res) => {
  var username = req.body.username;
  var email = req.body.email;
  var password = req.body.password;

  if (!username) { // if username is empty
    res.render("invalidname");
    return;
  }
  else if (!email) { // if email is empty
    res.render("invalidemail");
    return;
  }
  else if (!password) { // if password is empty
    res.render("invalidpassword");
    return;
  }

  const schema = Joi.object(
    {
      username: Joi.string().alphanum().max(20).required(),
      email: Joi.string().email().max(50).required(),
      password: Joi.string().max(20).required()
    });

  const validationResult = schema.validate({ username, email, password });
  if (validationResult.error != null) {
    console.log(validationResult.error);
    res.redirect("/signup");
  }

  var hashedPassword = await bcrypt.hash(password, saltRounds);

  await userCollection.insertOne({ username: username, password: hashedPassword, email: email, user_type: "user"});
  console.log("Inserted user");
 
  // !!! not sure if this part is necessary
  req.session.authenticated = true;
  req.session.username = username;
  req.session.cookie.maxAge = expireTime;
  // !!! not sure if this part is necessary
  
  res.redirect("/members");
});


app.get('/login', (req, res) => {
  res.render("login");
});


// after joi
app.post('/loginSubmit', async (req, res) => {
  var username = req.session.username;
  var email = req.body.email;
  var password = req.body.password;

  const schema = Joi.string().email().max(50).required();
  const validationResult = schema.validate(email);
  if (validationResult.error != null) {
    console.log(validationResult.error);
    res.redirect("/login");
    return;
  }
  
  const result = await userCollection.find({ email: email }).project({ email: 1, password: 1, user_type: 1, _id: 1, username:1}).toArray(); 

  console.log(result);
  if (result.length != 1) {
    console.log("user not found");
    res.render("invalidcombo");
    return;
  }

  if (await bcrypt.compare(password, result[0].password)) {
    console.log("correct password");
    req.session.authenticated = true;
    req.session.username = result[0].username;
    req.session.user_type = result[0].user_type;
    req.session.cookie.maxAge = expireTime;

    res.redirect('/members');
    return;
  }
  else {
    console.log("incorrect password");
    res.render("invalidcombo");
    return;
  }
});

app.get('/members', async (req, res) => {
  var username = req.session.username;
  req.session.cookie.maxAge = expireTime;

  if (!req.session.authenticated) {
    res.redirect('/');
    return;
  }

  res.render("members", { username: username });
});

// parameter in project is to show only the username and email, not the password, like on mySQL, you can choose which columns to select and display
app.get('/admin', sessionValidation, adminAuthorization, async (req,res) => {
  const users = await userCollection.find().project({username:1 , user_type:1, email: 1, _id: 1}).toArray();

  res.render("admin", {users: users});
});

app.post('/admin/promoteToAdmin', sessionValidation, adminAuthorization, async (req,res) => {
  var email = req.body.email;
  
  await userCollection.updateOne({email: email}, {$set: {user_type: "admin"}});

  const updatedUsers  = await userCollection.find().project({username:1 , user_type:1, email: 1, _id: 1}).toArray();

  res.render('admin', {users: updatedUsers });
});

app.post('/admin/demoteToUser', sessionValidation, adminAuthorization, async (req,res) => {
  var email = req.body.email;
  
  await userCollection.updateOne({email: email}, {$set: {user_type: "user"}});

  const updatedUsersAgain  = await userCollection.find().project({username:1 , user_type:1, email: 1, _id: 1}).toArray();

  res.render('admin', {users: updatedUsersAgain });
});

app.get('/logout', (req,res) => {
	req.session.destroy(); // deletes the cookie, so it automatically logs out the user
  res.redirect('/'); // redirect to home page
});

app.get('*', (req, res) => {
  res.status(404);
  res.render('404');
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});